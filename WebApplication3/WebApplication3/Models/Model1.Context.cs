//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DataBaseEmployeesEntities : DbContext
    {
        public DataBaseEmployeesEntities()
            : base("name=DataBaseEmployeesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Children> Children { get; set; }
        public DbSet<Department> Department { get; set; }
        public DbSet<Employee> Employee { get; set; }
        public DbSet<Schedule> Schedule { get; set; }
    
        public virtual int BirthCertificateDelete(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BirthCertificateDelete", idParameter, nameParameter);
        }
    
        public virtual int BirthCertificateInsert(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BirthCertificateInsert", idParameter, nameParameter);
        }
    
        public virtual ObjectResult<BirthCertificateOutputAll_Result> BirthCertificateOutputAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BirthCertificateOutputAll_Result>("BirthCertificateOutputAll");
        }
    
        public virtual int ChildrenDelete(string name, string sex, Nullable<System.DateTime> birth)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChildrenDelete", nameParameter, sexParameter, birthParameter);
        }
    
        public virtual int ChildrenInsert(string name, string sex, Nullable<System.DateTime> birth)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChildrenInsert", nameParameter, sexParameter, birthParameter);
        }
    
        public virtual ObjectResult<ChildrenOutputAll_Result> ChildrenOutputAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChildrenOutputAll_Result>("ChildrenOutputAll");
        }
    
        public virtual int DepartmentDelete(string name, Nullable<int> count)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepartmentDelete", nameParameter, countParameter);
        }
    
        public virtual int DepartmentInsert(string name, Nullable<int> count)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepartmentInsert", nameParameter, countParameter);
        }
    
        public virtual ObjectResult<DepartmentOutputAll_Result> DepartmentOutputAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentOutputAll_Result>("DepartmentOutputAll");
        }
    
        public virtual int EmployeeDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeDelete", idParameter);
        }
    
        public virtual int EmployeeInsert(string fullName, string pass, string address, Nullable<System.DateTime> birth, string sex, string position, string children)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var childrenParameter = children != null ?
                new ObjectParameter("Children", children) :
                new ObjectParameter("Children", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeInsert", fullNameParameter, passParameter, addressParameter, birthParameter, sexParameter, positionParameter, childrenParameter);
        }
    
        public virtual ObjectResult<EmployeeOutputAll_Result> EmployeeOutputAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeOutputAll_Result>("EmployeeOutputAll");
        }
    
        public virtual ObjectResult<GenerateBirthCer_Result> GenerateBirthCer(Nullable<int> rowsToInsert)
        {
            var rowsToInsertParameter = rowsToInsert.HasValue ?
                new ObjectParameter("RowsToInsert", rowsToInsert) :
                new ObjectParameter("RowsToInsert", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateBirthCer_Result>("GenerateBirthCer", rowsToInsertParameter);
        }
    
        public virtual ObjectResult<GenerateChild_Result> GenerateChild(Nullable<int> rowsToInsert)
        {
            var rowsToInsertParameter = rowsToInsert.HasValue ?
                new ObjectParameter("RowsToInsert", rowsToInsert) :
                new ObjectParameter("RowsToInsert", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateChild_Result>("GenerateChild", rowsToInsertParameter);
        }
    
        public virtual ObjectResult<GenerateDep_Result> GenerateDep(Nullable<int> rowsToInsert)
        {
            var rowsToInsertParameter = rowsToInsert.HasValue ?
                new ObjectParameter("RowsToInsert", rowsToInsert) :
                new ObjectParameter("RowsToInsert", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateDep_Result>("GenerateDep", rowsToInsertParameter);
        }
    
        public virtual ObjectResult<GenerateEmp1_Result> GenerateEmp1(Nullable<int> rowsToInsert)
        {
            var rowsToInsertParameter = rowsToInsert.HasValue ?
                new ObjectParameter("RowsToInsert", rowsToInsert) :
                new ObjectParameter("RowsToInsert", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateEmp1_Result>("GenerateEmp1", rowsToInsertParameter);
        }
    
        public virtual int GenerateSched(Nullable<int> rowsToInsert)
        {
            var rowsToInsertParameter = rowsToInsert.HasValue ?
                new ObjectParameter("RowsToInsert", rowsToInsert) :
                new ObjectParameter("RowsToInsert", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateSched", rowsToInsertParameter);
        }
    
        public virtual ObjectResult<OutputEmployee_Result> OutputEmployee(string name, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutputEmployee_Result>("OutputEmployee", nameParameter, dateParameter);
        }
    
        public virtual ObjectResult<OutputEmployeeWithCh_Result> OutputEmployeeWithCh()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutputEmployeeWithCh_Result>("OutputEmployeeWithCh");
        }
    
        public virtual int ScheduleDelete(Nullable<int> id_sc)
        {
            var id_scParameter = id_sc.HasValue ?
                new ObjectParameter("Id_sc", id_sc) :
                new ObjectParameter("Id_sc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ScheduleDelete", id_scParameter);
        }
    
        public virtual int ScheduleInsert(Nullable<int> id, string name, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ScheduleInsert", idParameter, nameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<ScheduleOutputAll_Result> ScheduleOutputAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScheduleOutputAll_Result>("ScheduleOutputAll");
        }
    
        public virtual int UpdateChildren(string name, string sex, Nullable<System.DateTime> birth)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateChildren", nameParameter, sexParameter, birthParameter);
        }
    
        public virtual int UpdateDepartment(string name, Nullable<int> count)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDepartment", nameParameter, countParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> id, string fullName, string pass, string address, Nullable<System.DateTime> birth, string sex, string position, string children)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var childrenParameter = children != null ?
                new ObjectParameter("Children", children) :
                new ObjectParameter("Children", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", idParameter, fullNameParameter, passParameter, addressParameter, birthParameter, sexParameter, positionParameter, childrenParameter);
        }
    
        public virtual int UpdateSchedule(Nullable<int> id_Sc, Nullable<int> id, string name, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var id_ScParameter = id_Sc.HasValue ?
                new ObjectParameter("Id_Sc", id_Sc) :
                new ObjectParameter("Id_Sc", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchedule", id_ScParameter, idParameter, nameParameter, startParameter, endParameter);
        }
    }
}
